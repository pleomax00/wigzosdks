apply plugin: 'com.android.library'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.novoda:bintray-release:0.2.7'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
    }

}
apply plugin: "com.jfrog.bintray"


allprojects {
    repositories { mavenCentral() }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'com.google.firebase:firebase-messaging:9.0.0'
}

group = 'com.github.pleomax00'
version = '1.0.10'   // Update version number for next release.

allprojects {
    repositories {
        jcenter()
    }

}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        /*testInstrumentationRunner 'wigzo.android.sdk.test.InstrumentationTestRunner'
        testHandleProfiling true
        testFunctionalTest true*/
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {

        }
    }
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs


artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {

    user = properties.getProperty("bintray.user")

    key = properties.getProperty("bintray.apikey")


    dryRun = false
    publish = true

    configurations = ['archives']
    pkg {
        repo = 'maven-repository'
        name = 'wigzo.androidsdk'
        desc ="A wigzo library for real time segmentation handling."
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/pleomax00/wigzosdks.git'
        publish = true
        version {
            name = '1.0.10' // Update version number for next release.
//            desc = //Optional - Version-specific description'
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }

    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}